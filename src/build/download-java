#!/usr/bin/env python3
import shutil
import subprocess
from pathlib import Path

import gradle
import jdk
from util import Error, download_file, main_wrapper


def get_installed_version() -> str | None:
    try:
        return (jdk.PATH / "version").read_text().strip()
    except FileNotFoundError:
        return None


def main() -> None:
    installed_ver = get_installed_version()
    build_ver = gradle.get_var("jdk_version")

    if installed_ver == build_ver:
        return

    if jdk.PATH.exists():
        shutil.rmtree(jdk.PATH)

    temp_path = Path().cwd() / f"{jdk.PATH.name}.temp"
    temp_archive = temp_path / "jdk.tar.gz"
    temp_jdk_path = temp_path / "jdk"

    url = jdk.download_url(build_ver)
    assert url.endswith(".tar.gz"), f"{url} is not a .tar.gz file"
    print(f"downloading jdk v{build_ver}")

    # download
    if temp_archive.exists() and temp_archive.stat().st_size == 0:
        temp_archive.unlink()
    if not temp_archive.exists():
        print(f"downloading {url}")
        download_file(url, temp_archive)

    # extract
    if temp_jdk_path.exists():
        shutil.rmtree(temp_jdk_path)
    temp_jdk_path.mkdir()
    print("extracting")
    subprocess.run(["tar", "xf", temp_archive], cwd=temp_jdk_path)

    # find the base jdk path
    for path in [p for p in temp_jdk_path.rglob("*") if p.is_dir()]:
        if (path / "release").is_file() and (path / "bin").is_dir():
            base_path = path
            break
    else:
        raise Error("failed to find base jdk path")

    # move into place
    base_path.rename(jdk.PATH)

    # clean up
    shutil.rmtree(temp_path)

    # sanity checks
    subprocess.run([jdk.PATH / "bin/java", "--version"], check=True)

    # write version in known format
    (jdk.PATH / "version").write_text(f"{build_ver}\n")


with main_wrapper():
    main()
