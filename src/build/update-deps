#!/usr/bin/env python3
import json
import re
import sys
import urllib.parse as url_parse
import urllib.request as request
import xml.etree.ElementTree as Etree
from pathlib import Path

import gradle
import jdk
from util import Error, fetch_json, version_tuple


def main() -> None:
    only_update = sys.argv[1] if len(sys.argv) == 2 else None
    config = gradle.BuildConfig()

    # google-java-format
    if only_update in (None, "google-java-format"):
        meta = fetch_json(
            "https://api.github.com/repos/google/google-java-format/releases/latest"
        )
        config.set(
            "google_java_format_version",
            meta["tag_name"].lstrip("v"),
        )

    # checkstyle
    if only_update in (None, "checkstyle"):
        meta = fetch_json(
            "https://api.github.com/repos/checkstyle/checkstyle/releases/latest"
        )
        config.set(
            "checkstyle_version",
            re.sub(r"^checkstyle-", "", meta["tag_name"]),
        )

    # jdk
    if only_update in (None, "jdk"):
        config.set(
            "jdk_version",
            jdk.latest_version(),
        )

    for name, value in config.unmodified.items():
        print(f"{name} {value} ok")
    for name, value in config.modified.items():
        print(f"{name} {config.get(name, unmodified=True)} -> {value}")

    config.commit()


try:
    main()
except Error as e:
    print(e, file=sys.stderr)
    sys.exit(1)
