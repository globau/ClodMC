plugins {
    id 'java-library'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'checkstyle'
}

repositories {
    mavenCentral()
    maven { url = 'https://repo.papermc.io/repository/maven-public/' }
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://repo.bluecolored.de/releases' }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.21.3-R0.1-SNAPSHOT'
    compileOnly 'com.github.GriefPrevention:GriefPrevention:16.18.4'
    compileOnly 'de.bluecolored.bluemap:BlueMapAPI:2.7.2'
    compileOnly 'org.jetbrains:annotations:15.0'
}

group = 'au.com.glob'
version = './src/build/version.py'.execute().text.trim()
description = 'ClodMC'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:deprecation'
}

checkstyle {
    toolVersion '10.14.0'
    maxWarnings = 0
}

configurations.checkstyle {
    resolutionStrategy.capabilitiesResolution.withCapability('com.google.collections:google-collections') {
        select('com.google.guava:guava:23.0')
    }
}

spotless {
    format 'misc', {
        target '*.gradle', '.gitattributes', '.gitignore'
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
    format 'text', {
        target 'src/main/resources/*.txt'
        trimTrailingWhitespace()
        endWithNewline()
    }
    java {
        googleJavaFormat('1.24.0').reflowLongStrings().skipJavadocFormatting()
        formatAnnotations()
    }
    yaml {
        target 'src/main/resources/*.yml'
        trimTrailingWhitespace()
        endWithNewline()
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('paper-plugin.yml') {
        expand props
    }
}

if (file('local.gradle').exists()) {
    apply from: 'local.gradle'
}
